{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Joe's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: John Shanahan</li> <li>Reviewer: Harrison Enyeart</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure to have a Github account:</p> <ul> <li>Github</li> </ul> <p>Make sure you have the following installed:</p> <ul> <li>Git</li> <li>Docker</li> <li>VS Code (with the Dev Containers Extension)</li> </ul>"},{"location":"tutorials/go-setup/#1-create-a-new-directory","title":"1. Create a New Directory","text":"<p>Start by opening your terminal and creating a new directory by running the command below <pre><code>mkdir go-dev-container\ncd go-dev-container\n</code></pre></p> <p>Next, initialize a new Git repository: <pre><code>git init\n</code></pre></p> <p>Now create a <code>README.md</code> file: <pre><code>echo \"# Go Dev Container Project\" &gt; README.md\n</code></pre></p>"},{"location":"tutorials/go-setup/#2-set-up-the-dev-container","title":"2. Set Up the Dev Container","text":"<p>Inside your project directory, create a <code>.devcontainer</code> folder: <pre><code>mkdir .devcontainer\n</code></pre></p> <p>Create a <code>devcontainer.json</code> file inside <code>.devcontainer</code>: <pre><code>touch .devcontainer/devcontainer.json\n</code></pre></p> <p>Open the project in Visual Studio Code: <pre><code>code .\n</code></pre></p> <p>Now that we are inside VS Code, open the <code>devcontainer.json</code> file from the <code>.devcontainer</code> folder and add the following content: <pre><code>{\n    \"name\": \"Go Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:bullseye\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"golang.go\"\n            ]\n        }\n    }\n}\n</code></pre></p> <p>Tip</p> <ul> <li>This uses the Go base image provided by Microsoft.</li> <li>The <code>golang.go</code> extension adds helpful debugging and code navigation features.</li> </ul> <p>Save the file and reopen the project in the Dev Container:</p> <ul> <li>When prompted, click Reopen in Container in VS Code.</li> </ul> <p>Tip</p> <p>The devcontainer.json file defines the environment setup for the project, including the Go base image and VS Code extensions.</p>"},{"location":"tutorials/go-setup/#3-verify-go-installation","title":"3. Verify Go Installation","text":"<p>Inside the Dev Container terminal, make sure Go is installed and up to date by running: <pre><code>go version\n</code></pre> You should see an output like: <pre><code>go version go1.21.0 linux/amd64\n</code></pre></p> <p>Tip</p> <p>If the version is outdated, rebuild the container to ensure the latest image is used.</p>"},{"location":"tutorials/go-setup/#4-create-a-go-project","title":"4. Create a Go Project","text":"<p>Initialize a new Go module, mine is called <code>hello-comp423</code> <pre><code>mkdir hello-comp423\ncd hello-comp423\ngo mod init hello-comp423\n</code></pre></p> <p>Tip</p> <p>The go mod init command creates a <code>go.mod</code> file, which defines your module's dependencies.</p> <p>Navigate into the project folder: <pre><code>cd hello-comp423\n</code></pre></p>"},{"location":"tutorials/go-setup/#5-write-your-program","title":"5. Write Your Program","text":"<p>Create a new file named <code>main.go</code> inside the project folder, and add the following content: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></p> <p>Tip</p> <p>fmt.Println() is used to print text to the console in Go.</p>"},{"location":"tutorials/go-setup/#6-run-the-program","title":"6. Run the Program","text":"<p>Run the program: <pre><code>go run main.go\n</code></pre> You should see the following output: <pre><code>Hello COMP423\n</code></pre></p>"},{"location":"tutorials/go-setup/#7-build-the-program","title":"7. Build the Program","text":"<p>To create a standalone executable, use the <code>go build</code> command: <pre><code>go build -o hello-comp423\n</code></pre> This generates a binary file named <code>hello-comp423</code>. Run the binary directly using: <pre><code>./hello-comp423\n</code></pre> You should see the same output: <pre><code>Hello COMP423\n</code></pre></p> <p>Discussion</p> <ul> <li>The go build command compiles your code into an executable binary, similar to the gcc command in COMP211 for C programs. However, Go produces statically linked binaries by default, meaning you don\u2019t need external dependencies to run the binary.</li> <li>Using go build is preferred when deploying your application, as the compiled binary is optimized and can run independently without needing Go installed.</li> </ul>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>You have successfully used a git repository, built a dev container, run helloworld in Go, and learned the difference between <code>go run</code> and <code>go build</code>.</p>"}]}